name: Multi ABI Build (on main.cpp changes)

on:
  push:
    paths:
      - 'src/main.cpp'
  pull_request:
    paths:
      - 'src/main.cpp'

jobs:
  build-universal-abi:
    runs-on: ubuntu-latest

    env:
      ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk-r26d
      ABIS: "arm64-v8a armeabi-v7a x86 x86_64"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Android NDK
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r26d-linux.zip
          unzip -q android-ndk-r26d-linux.zip

      - name: Clean old builds and libs
        run: |
          rm -rf build libs
          mkdir -p libs

      - name: Build for all ABIs and copy to libs/
        run: |
          set -e
          for ABI in $ABIS; do
            echo "Building for $ABI"
            mkdir -p build/$ABI
            cd build/$ABI
            cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
                  -DANDROID_ABI=$ABI \
                  -DANDROID_PLATFORM=android-21 \
                  ../..
            cmake --build .
            cd ../..
            # Find the built executable (assuming CMakeLists produces core_task_optimizer or similar)
            BIN=$(find build/$ABI -type f -executable -name "core_task_optimizer*" | head -n1)
            if [ -z "$BIN" ]; then
              echo "No binary found for $ABI"
              exit 1
            fi
            mkdir -p libs/$ABI
            cp "$BIN" libs/$ABI/task_optimizer
          done

      - name: Upload Multi libs folder
        uses: actions/upload-artifact@v4
        with:
          name: Multi-libs
          path: libs/